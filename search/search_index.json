{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Multiplex Image Pipeline","text":"<p>Welcome to the documentation for the Multiplexed Image Analysis Pipeline. Use the navigation to explore tutorials, API documentation, and configuration details.</p>"},{"location":"api/","title":"API Reference","text":"<p>This section contains the reference documentation for all modules in the pipeline.</p>"},{"location":"api/#multiplex_pipeline.core_preparation.cutter.CoreCutter","title":"<code>CoreCutter(margin=0, mask_value=0)</code>","text":"<p>Extract rectangular or polygonal regions from images.</p> <p>Create a new cutter.</p> <p>Parameters:</p> Name Type Description Default <code>margin</code> <code>int</code> <p>Padding to apply around each core.</p> <code>0</code> <code>mask_value</code> <code>int</code> <p>Value used outside polygon masks.</p> <code>0</code>"},{"location":"api/#multiplex_pipeline.core_preparation.cutter.CoreCutter.extract_core","title":"<code>extract_core(array, row)</code>","text":"<p>Extract a single core from the given image.</p> <p>Parameters:</p> Name Type Description Default <code>array</code> <code>ndarray | Array</code> <p>Source image.</p> required <code>row</code> <code>Series</code> <p>Metadata describing the core. Required fields include <code>row_start</code>, <code>row_stop</code>, <code>column_start</code>, <code>column_stop</code> and <code>poly_type</code>.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>numpy.ndarray: The extracted core image.</p>"},{"location":"api/#multiplex_pipeline.core_preparation.assembler.CoreAssembler","title":"<code>CoreAssembler(temp_dir, output_dir, max_pyramid_levels=4, downscale=2, allowed_channels=None, cleanup=False)</code>","text":"<p>Assemble per-channel TIFFs into a <code>SpatialData</code> object.</p> <p>Initialize the assembler.</p> <p>Parameters:</p> Name Type Description Default <code>temp_dir</code> <code>str</code> <p>Directory containing temporary per-core folders.</p> required <code>output_dir</code> <code>str</code> <p>Location where <code>.zarr</code> outputs are written.</p> required <code>max_pyramid_levels</code> <code>int</code> <p>Maximum number of multiscale levels. <code>0</code> disables pyramid creation.</p> <code>4</code> <code>downscale</code> <code>int</code> <p>Downsampling factor per level.</p> <code>2</code> <code>allowed_channels</code> <code>list[str] | None</code> <p>Restrict processing to these channels. If <code>None</code> all channels are used.</p> <code>None</code> <code>cleanup</code> <code>bool</code> <p>Remove intermediate TIFFs when <code>True</code>.</p> <code>False</code>"},{"location":"api/#multiplex_pipeline.core_preparation.assembler.CoreAssembler.assemble_core","title":"<code>assemble_core(core_id)</code>","text":"<p>Assemble a single core from its per-channel TIFF images.</p> <p>Parameters:</p> Name Type Description Default <code>core_id</code> <code>str</code> <p>Identifier of the core's temporary folder.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Path to the written <code>.zarr</code> dataset.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the temporary core folder is missing.</p> <code>ValueError</code> <p>If no TIFF files are found in the folder.</p>"},{"location":"api/#multiplex_pipeline.core_preparation.controller.CorePreparationController","title":"<code>CorePreparationController(metadata_df, image_paths, temp_dir, output_dir, file_strategy, margin=0, mask_value=0, max_pyramid_levels=3, core_cleanup_enabled=True)</code>","text":"<p>Coordinate cutting and assembly of cores from multiplex images.</p> <p>Initialize the controller.</p> <p>Parameters:</p> Name Type Description Default <code>metadata_df</code> <code>DataFrame</code> <p>Table describing each core.</p> required <code>image_paths</code> <code>dict[str, str]</code> <p>Mapping of channel names to image paths.</p> required <code>temp_dir</code> <code>str</code> <p>Directory for temporary core files.</p> required <code>output_dir</code> <code>str</code> <p>Destination for assembled <code>.zarr</code> outputs.</p> required <code>file_strategy</code> <code>FileAvailabilityStrategy</code> <p>Strategy used to obtain image files.</p> required <code>margin</code> <code>int</code> <p>Pixels of padding around each core.</p> <code>0</code> <code>mask_value</code> <code>int</code> <p>Fill value for masked regions.</p> <code>0</code> <code>max_pyramid_levels</code> <code>int</code> <p>Number of pyramid levels.</p> <code>3</code> <code>core_cleanup_enabled</code> <code>bool</code> <p>Remove intermediate TIFFs after assembly.</p> <code>True</code>"},{"location":"api/#multiplex_pipeline.core_preparation.controller.CorePreparationController.cut_channel","title":"<code>cut_channel(channel, file_path)</code>","text":"<p>Cut all cores from a single channel image.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>str</code> <p>Name of the channel being processed.</p> required <code>file_path</code> <code>str | Path</code> <p>Path to the OME-TIFF file.</p> required"},{"location":"api/#multiplex_pipeline.core_preparation.controller.CorePreparationController.run","title":"<code>run()</code>","text":"<p>Process all channels and assemble cores.</p> <p>This method blocks until all channels have been processed and the corresponding cores have been assembled.</p>"},{"location":"api/#multiplex_pipeline.core_preparation.controller.CorePreparationController.try_assemble_ready_cores","title":"<code>try_assemble_ready_cores()</code>","text":"<p>Assemble any cores whose channels are complete.</p>"},{"location":"usage/","title":"Usage","text":"<p>This pipeline supports both command-line execution and interactive analysis via Jupyter notebooks.</p>"},{"location":"usage/#command-line-usage","title":"Command-Line Usage","text":"<p>To run the pipeline from the command line, use the provided scripts:</p>"},{"location":"usage/#prepare-cores","title":"Prepare Cores","text":"<pre><code>python scripts/prepare_cores.py --config config/analysis_pipeline.yaml\n</code></pre> <p>This script wraps the <code>CoreController</code> class, which handles:</p> <ul> <li>Reading image and metadata files.</li> <li>Cutting out cores with appropriate margins and masking.</li> <li>Writing intermediate TIFFs.</li> <li>Assembling per-core Zarr datasets using the SpatialData model.</li> </ul> <p>For more details, see the <code>core_cutter.py</code> source and its configuration.</p>"},{"location":"usage/#jupyter-notebook-usage","title":"Jupyter Notebook Usage","text":"<p>For interactive inspection, prototyping, or educational purposes, the following notebooks illustrate how to use the components directly:</p> <ul> <li><code>core_selection_demo.ipynb</code>: An interactive notebook that enables users to define cores as rectangles or polygons using the Napari viewer. It supports automatic core detection via Segment Anything v2, with the option to manually correct the detected shapes or draw new ones from scratch. This step is interactive and only available as a notebook. The result is a <code>core_info.csv</code> file containing core metadata for use in subsequent steps via either Jupyter or CLI.</li> <li><code>core_cutting_demo.ipynb</code>: Demonstrates how to load a single image and metadata entry and apply the core cutting logic.</li> </ul>"},{"location":"configuration/","title":"\ud83d\udd27 Configuration","text":"<p>You can explore parameters related to different parts of the pipeline:</p> <ul> <li>Core cutting</li> <li>Understand channel selection logic for core cutting</li> </ul>"},{"location":"configuration/#full-configuration-file-example","title":"Full configuration file example:","text":"<pre><code>\n# core cutting\n\nimage_dir: \"C:/path_to_image_directory\"\ntemp_dir: \"C:/path_to_temporary_directory\"\noutput_dir: \"C:/path_to_output_directory\"\ncore_info: \"C:/path_to/core_metadata.csv\"\n\ninclude_channels: ['002_DAPI']\nexclude_channels: ['005_pRB']\nuse_channels: ['DAPI','CD3']\n\nmargin: 10\nmask_value: 0\nmax_pyramid_levels: 3\n\ntransfer_cleanup_enabled: True\ncore_cleanup_enabled: True\n</code></pre>"},{"location":"configuration/channel-selection/","title":"\ud83c\udfaf Channel Selection Logic","text":"<p>The pipeline supports fine-grained control over which imaging channels are included in processing. This is essential because:</p> <ul> <li>The same marker may be imaged multiple times across rounds (e.g., re-staining or optimization).</li> <li>DAPI is typically acquired in every round for registration but usually only one version is needed.</li> </ul> <p>The selection process follows this logic:</p>"},{"location":"configuration/channel-selection/#1-default-behavior-if-no-overrides","title":"1. Default Behavior (if no overrides)","text":"<ul> <li>For each marker imaged in multiple rounds, the latest round is used by default.</li> <li>For DAPI, only <code>001_DAPI</code> is included unless specified otherwise.</li> </ul>"},{"location":"configuration/channel-selection/#2-using-include_channels","title":"2. Using <code>include_channels</code>","text":"<ul> <li>This is a list of fully qualified channel names like <code>002_CD44</code>, <code>001_DAPI</code>.</li> <li>If set, only these channels are included for a given marker \u2014 they override automatic selection.</li> <li>Use this to force inclusion of earlier rounds or include duplicates for comparison.</li> </ul>"},{"location":"configuration/channel-selection/#3-using-exclude_channels","title":"3. Using <code>exclude_channels</code>","text":"<ul> <li>This is a list of full channel names to skip.</li> <li>If <code>include_channels</code> is not set, <code>exclude_channels</code> can be used to remove undesired versions.</li> <li>Example: to exclude <code>003_pRB</code> in favor of earlier versions (or none).</li> </ul>"},{"location":"configuration/channel-selection/#4-using-use_channels","title":"4. Using <code>use_channels</code>","text":"<ul> <li>This is a list of base marker names (like <code>DAPI</code>, <code>pRB</code>, <code>CD44</code>) after stripping the round prefix.</li> <li>After all other filtering, <code>use_channels</code> is applied as a final filter.</li> <li>Use it to narrow the final channel set to specific markers, regardless of which round was selected.</li> </ul>"},{"location":"configuration/channel-selection/#examples","title":"Examples","text":""},{"location":"configuration/channel-selection/#example-1-default-automatic-selection","title":"Example 1: Default automatic selection","text":"<pre><code>include_channels: []\nexclude_channels: []\nuse_channels: []\n</code></pre> <ul> <li>Keeps only the latest round per marker, and <code>001_DAPI</code>.</li> </ul>"},{"location":"configuration/channel-selection/#example-2-force-earlier-prb-round-to-be-used","title":"Example 2: Force earlier pRB round to be used","text":"<pre><code>include_channels: [\"001_pRB\"]\nuse_channels: []\n</code></pre> <ul> <li><code>001_pRB</code> is used even if <code>003_pRB</code> exists.</li> </ul>"},{"location":"configuration/channel-selection/#example-3-exclude-a-problematic-round","title":"Example 3: Exclude a problematic round","text":"<pre><code>exclude_channels: [\"003_CD44\"]\n</code></pre> <ul> <li>Automatically selects an earlier round (if available) for CD44.</li> </ul>"},{"location":"configuration/channel-selection/#example-4-only-process-dapi-and-cd44","title":"Example 4: Only process DAPI and CD44","text":"<pre><code>use_channels: [\"DAPI\", \"CD44\"]\n</code></pre> <ul> <li>Filters final output to only include these two base markers.</li> </ul>"},{"location":"configuration/channel-selection/#conflicts-and-priority","title":"Conflicts and Priority","text":"<ul> <li>If a channel is listed in both <code>include_channels</code> and <code>exclude_channels</code>, a <code>ValueError</code> is raised.</li> <li><code>use_channels</code> is applied last, on the base names after channel selection.</li> </ul>"},{"location":"configuration/core-cutting/","title":"Core Cutting Configuration","text":"<p>Core cutting supports two modes of operation:</p> <ul> <li>Local mode: Input files are available on the local filesystem.</li> <li>Globus mode: Input files are accessed remotely using Globus endpoints.</li> </ul>"},{"location":"configuration/core-cutting/#shared-configuration","title":"Shared Configuration","text":"<p>These fields are common to both modes:</p> <pre><code>temp_dir: \"C:/path_to_temporary_directory\"\noutput_dir: \"C:/path_to_output_directory\"\ncore_info: \"C:/path_to/core_metadata.csv\"\ninclude_channels: ['002_DAPI']\nexclude_channels: ['005_pRB']\nuse_channels: ['DAPI','CD3']\nmargin: 10\nmask_value: 0\nmax_pyramid_levels: 3\n\ntransfer_cleanup_enabled: true\ncore_cleanup_enabled: true\n</code></pre> Key Type Description <code>temp_dir</code> <code>str</code> Temporary folder to store extracted TIFFs for each core <code>output_dir</code> <code>str</code> Final destination for SpatialData (Zarr) outputs <code>core_info</code> <code>str</code> Path to the CSV file containing core cutting metadata <code>include_channels</code> <code>list[str]</code> Optional list of full channel names to include (e.g., <code>001_DAPI</code>) <code>exclude_channels</code> <code>list[str]</code> Optional list of full channel names to exclude <code>use_channels</code> <code>list[str]</code> Optional list to restrict final base marker names (e.g., <code>DAPI</code>, <code>CD3</code>) <code>margin</code> <code>int</code> Number of pixels to pad around each bounding box when cutting cores <code>mask_value</code> <code>int</code> Value used to fill background for polygonal core masks <code>max_pyramid_levels</code> <code>int</code> Number of downsampled pyramid levels (0 means no pyramid) <code>transfer_cleanup_enabled</code> <code>bool</code> Whether to delete temporary files downloaded via Globus after the run <code>core_cleanup_enabled</code> <code>bool</code> Whether to delete TIFFs from <code>temp_dir</code> after core assembly <ul> <li>For detailed explanation of <code>include_channels</code>, <code>exclude_channels</code>, and <code>use_channels</code>, see the channel selection logic.</li> </ul>"},{"location":"configuration/core-cutting/#sourcing-image-files","title":"Sourcing Image Files","text":"<p>Differences in local vs. Globus mode come from how OME-TIFF files are sourced.</p>"},{"location":"configuration/core-cutting/#local-mode","title":"\ud83d\udcf0 Local Mode","text":"<p>In local mode, <code>image_dir</code> should point to a folder with accessible OME-TIFF files on disk.</p> <pre><code>image_dir: \"C:/path_to_image_directory\"\n</code></pre> <ul> <li>On Windows, use forward slashes <code>/</code> in paths: <code>C:/path/to/folder</code>. This avoids issues with escape characters.</li> </ul>"},{"location":"configuration/core-cutting/#globus-mode","title":"\u2601\ufe0f Globus Mode","text":"<p>In Globus mode, you must also specify the path to a Globus configuration directory. The <code>image_dir</code> field should reflect the remote directory on the Globus endpoint:</p> <pre><code>image_dir: \"/my_globus/path_to_image_directory\"\nglobus_config: \"C:/path_to_globus_config_directory\"\n</code></pre> <p>This allows the pipeline to discover and transfer files on demand via Globus.</p>"}]}